AWSTemplateFormatVersion: 2010-09-09
Description: "Base infrastructure template"
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Environment"
        Parameters:
          - Environment
      - Label:
          default: "Portal buckets"
        Parameters:
          - UserPortalBucketName
          - AdminPortalBucketName
          - DriverPortalBucketName
      - Label:
          default: "ECS/ECR"
        Parameters:
          - ECSClusterName
          - UserServiceRepoName
          - OrderServiceRepoName
          - RestaurantServiceRepoName
      - Label:
          default: "Route 53"
        Parameters:
          - HostedZoneId
          - CertificateARN
      - Label:
          default: "CSV Lambda function"
        Parameters:
          - CsvBucketName

Parameters:
  Environment:
    Type: String
    Default: prod
    AllowedValues:
      - "prod"
      - "dev"
      - "test"

  HostedZoneId:
    Type: String
  CertificateARN:
    Type: String
  LoadBalancerPath:
    Type: String
    Default: api.drscrumptious.com

  UserPortalBucketName:
    Type: String
    Default: qqd-user-portal
  AdminPortalBucketName:
    Type: String
    Default: qqd-admin-portal
  DriverPortalBucketName:
    Type: String
    Default: qqd-driver-portal

  CsvBucketName:
    Type: String
    Default: qqd-csv-bucket

  ECSClusterName:
    Type: String
    Default: MainCluster
  UserServiceRepoName:
    Type: String
    Default: user-service
    AllowedPattern: "[a-z\\-]+"
  OrderServiceRepoName:
    Type: String
    Default: order-service
    AllowedPattern: "[a-z\\-]+"
  RestaurantServiceRepoName:
    Type: String
    Default: restaurant-service
    AllowedPattern: "[a-z\\-]+"

Resources:
  # SecurityGroups
  ServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "ServiceSecurityGroup-${Environment}"
      GroupDescription: allows traffic on port 8080
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8090
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: name
          Value: ServiceSecurityGroup
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "LoadBalancerSecurityGroup-${Environment}"
      GroupDescription: allows https traffic
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8090
          CidrIp: 0.0.0.0/0

  # IAM roles
  FargateRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
                - ecs.amazonaws.com
                - ecs-tasks.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: /
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
        - "arn:aws:iam::aws:policy/AmazonECS_FullAccess"
      Policies:
        - PolicyName: AccessECR
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "ecr:BatchGetImage"
                  - "ecr:GetAuthorizationToken"
                  - "ecr:GetDownloadUrlForLayer"
                Resource: "*"

  # VPC and subnets
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.20.0.0/16
      EnableDnsSupport: true
      Tags:
        - Key: name
          Value: !Sub "${Environment}-Vpc"
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 0
        - !GetAZs
          Ref: "AWS::Region"
      VpcId: !Ref VPC
      CidrBlock: 10.20.0.0/20
      Tags:
        - Key: name
          Value: !Sub "public subnet 1 - ${Environment}"
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 1
        - !GetAZs
          Ref: "AWS::Region"
      VpcId: !Ref VPC
      CidrBlock: 10.20.16.0/20
      Tags:
        - Key: name
          Value: !Sub "public subnet 2 - ${Environment}"
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 0
        - !GetAZs
          Ref: "AWS::Region"
      VpcId: !Ref VPC
      CidrBlock: 10.20.32.0/20
      Tags:
        - Key: name
          Value: !Sub "private subnet 1 - ${Environment}"
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 1
        - !GetAZs
          Ref: "AWS::Region"
      VpcId: !Ref VPC
      CidrBlock: 10.20.48.0/20
      Tags:
        - Key: name
          Value: !Sub "private subnet 2 - ${Environment}"
  IGW:
    Type: AWS::EC2::InternetGateway
    Properties: {}
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref IGW
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: name
          Value: !Sub "Public RT - ${Environment}"
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW
  PublicRTAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable
  PublicRTAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable
  EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  NatGw:
    Type: AWS::EC2::NatGateway
    Properties:
      SubnetId: !Ref PublicSubnet2
      AllocationId: !GetAtt EIP.AllocationId
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: name
          Value: !Sub "Private Route Table - ${Environment}"
  PrivateNatRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGw
  PrivateRTAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable
  PrivateRTAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  # ECR Repositories
  UserServiceRepo:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub "${UserServiceRepoName}-${Environment}"
  OrderServiceRepo:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub "${OrderServiceRepoName}-${Environment}"
  RestaurantServiceRepo:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub "${RestaurantServiceRepoName}-${Environment}"

  # S3 Buckets
  AccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub "${Environment} access identity"
  UserPortal:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketName: !Sub "${UserPortalBucketName}-${Environment}"
      Tags:
        - Key: name
          Value: !Sub "UserPortalBucket-${Environment}"
  UserPortalPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref UserPortal
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: "s3:GetObject"
            Effect: Allow
            Resource: !Sub "arn:aws:s3:::${UserPortal}/*"
            Principal:
              CanonicalUser: !GetAtt AccessIdentity.S3CanonicalUserId
  AdminPortal:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketName: !Sub "${AdminPortalBucketName}-${Environment}"
      Tags:
        - Key: name
          Value: !Sub "AdminPortalBucket-${Environment}"
  AdminPortalPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref AdminPortal
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: "s3:GetObject"
            Effect: Allow
            Resource: !Sub "arn:aws:s3:::${AdminPortal}/*"
            Principal:
              CanonicalUser: !GetAtt AccessIdentity.S3CanonicalUserId
  DriverPortal:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketName: !Sub "${DriverPortalBucketName}-${Environment}"
      Tags:
        - Key: name
          Value: !Sub "DriverPortalBucket-${Environment}"
  DriverPortalPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref DriverPortal
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: "s3:GetObject"
            Effect: Allow
            Resource: !Sub "arn:aws:s3:::${DriverPortal}/*"
            Principal:
              CanonicalUser: !GetAtt AccessIdentity.S3CanonicalUserId
  # Lambda function Buckets
  CsvBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketName: !Sub "${CsvBucketName}-${Environment}"
      LifecycleConfiguration:
        Rules:
          - Status: Enabled
            Id: GlacierRule
            Prefix: glacier
            Transitions:
              - StorageClass: GLACIER
                TransitionInDays: 3

  # Route 53
  LoadBalancerRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      Name: !Ref LoadBalancerPath
      Type: CNAME
      TTL: 900
      HostedZoneId: !Ref HostedZoneId
      ResourceRecords:
        - !GetAtt LoadBalancer.DNSName

  # ECS
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      Name: !Sub "ECSLoadBalancer-${Environment}"
      Scheme: internet-facing
      Type: application
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
  ## Listener
  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Port: 443
      Protocol: "HTTPS"
      Certificates:
        - CertificateArn: !Ref CertificateARN
      LoadBalancerArn: !Ref LoadBalancer
      DefaultActions:
        - Type: fixed-response
          FixedResponseConfig:
            StatusCode: 404
            MessageBody: "method not found"
            ContentType: text/plain
  ## Target groups
  UserTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      HealthCheckPath: /health
      HealthCheckPort: 8080
      HealthCheckProtocol: HTTP
      VpcId: !Ref VPC
      Name: !Sub "UserTargetGroup-${Environment}"
      Port: 8080
      Protocol: HTTP
      TargetType: ip
  OrderTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      HealthCheckPath: /health
      HealthCheckPort: 8080
      HealthCheckProtocol: HTTP
      VpcId: !Ref VPC
      Name: !Sub "OrderTargetGroup-${Environment}"
      Port: 8080
      Protocol: HTTP
      TargetType: ip
  RestaurantTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      HealthCheckPath: /health
      HealthCheckPort: 8080
      HealthCheckProtocol: HTTP
      VpcId: !Ref VPC
      Name: !Sub "RestaurantTargetGroup-${Environment}"
      Port: 8080
      Protocol: HTTP
      TargetType: ip
  # ECS cluster
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      CapacityProviders:
        - FARGATE
      ClusterName: !Sub "${ECSClusterName}-${Environment}"

  CsvBucketArnSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub "CsvBucketArn-${Environment}"
      SecretString: !GetAtt CsvBucket.Arn
  CsvBucketnameSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub "${CsvBucketName}-${Environment}"
      SecretString: !Ref CsvBucket
  VpcId:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub "VpcId-${Environment}"
      SecretString: !Ref VPC
  ServiceSecurityGroupName:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub "ServiceSecurityGroup-${Environment}"
      SecretString: !Ref ServiceSecurityGroup
  FargateRoleARN:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub "FargateRoleARN-${Environment}"
      SecretString: !GetAtt FargateRole.Arn
  PublicSubnet1Secret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub "PublicSubnet1-${Environment}"
      SecretString: !Ref PublicSubnet1
  PublicSubnet2Secret:
    Type: AWS::SecretsManager::Secret
    Properties:
      SecretString: !Ref PublicSubnet2
      Name: !Sub "PublicSubnet2-${Environment}"
  PrivateSubnet1Secret:
    Type: AWS::SecretsManager::Secret
    Properties:
      SecretString: !Ref PrivateSubnet1
      Name: !Sub "PrivateSubnet1-${Environment}"
  PrivateSubnet2Secret:
    Type: AWS::SecretsManager::Secret
    Properties:
      SecretString: !Ref PrivateSubnet2
      Name: !Sub "PrivateSubnet2-${Environment}"
  AccessIdentitySecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      SecretString: !Ref AccessIdentity
      Name: !Sub "S3AccessIdentity-${Environment}"
  LBListenerArn:
    Type: AWS::SecretsManager::Secret
    Properties:
      SecretString: !Ref LoadBalancerListener
      Name: !Sub "LBListenerARN-${Environment}"
  UserTargetGroupArn:
    Type: AWS::SecretsManager::Secret
    Properties:
      SecretString: !Ref UserTargetGroup
      Name: !Sub "UserTGArn-${Environment}"
  OrderTargetGroupArn:
    Type: AWS::SecretsManager::Secret
    Properties:
      SecretString: !Ref OrderTargetGroup
      Name: !Sub "OrderTGArn-${Environment}"
  RestaurantTargetGroupArn:
    Type: AWS::SecretsManager::Secret
    Properties:
      SecretString: !Ref RestaurantTargetGroup
      Name: !Sub "RestaurantTGArn-${Environment}"
  ECSClusterNameSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      SecretString: !Sub "${ECSClusterName}-${Environment}"
      Name: !Sub "ECSClusterName-${Environment}"
  HostedZoneIdSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      SecretString: !Ref HostedZoneId
      Name: !Sub "HostedZoneId-${Environment}"
  CertificateArn:
    Type: AWS::SecretsManager::Secret
    Properties:
      SecretString: !Ref CertificateARN
      Name: !Sub "CertificateARN-${Environment}"
  AdminPortalBucketDomainName:
    Type: AWS::SecretsManager::Secret
    Properties:
      SecretString: !GetAtt AdminPortal.DomainName
      Name: !Sub "AdminPortalDomainName-${Environment}"
  UserPortalBucketDomainName:
    Type: AWS::SecretsManager::Secret
    Properties:
      SecretString: !GetAtt UserPortal.DomainName
      Name: !Sub "UserPortalDomainName-${Environment}"
  DriverPortalBucketDomainName:
    Type: AWS::SecretsManager::Secret
    Properties:
      SecretString: !GetAtt DriverPortal.DomainName
      Name: !Sub "DriverPortalDomainName-${Environment}"
  JwtSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      GenerateSecretString:
        PasswordLength: 32
      Name: !Sub "JwtSecret-${Environment}"
