AWSTemplateFormatVersion: 2010-09-09
Description: "Base infrastructure template"
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Portal buckets"
        Parameters:
          - UserPortalBucketName
          - AdminPortalBucketName
          - DriverPortalBucketName
      - Label:
          default: "ECS/ECR"
        Parameters:
          - ECSClusterName
          - UserServiceRepoName
          - OrderServiceRepoName
          - RestaurantServiceRepoName
      - Label:
          default: "Database parameters"
        Parameters:
          - DBInstanceID
          - DBUsername
          - DBPassword
          - DBInstanceClass
          - DBAllocatedStorage
          - DBName
      - Label:
          default: "Route 53"
        Parameters:
          - HostedZoneId
          - CertificateARN

Parameters:
  HostedZoneId:
    Type: String
  CertificateARN:
    Type: String

  UserPortalBucketName:
    Type: String
    Default: qqd-user-portal
  AdminPortalBucketName:
    Type: String
    Default: qqd-admin-portal
  DriverPortalBucketName:
    Type: String
    Default: qqd-driver-portal

  ECSClusterName:
    Type: String
    Default: MainCluster
  UserServiceRepoName:
    Type: String
    Default: user-service
    AllowedPattern: "[a-z\\-]+"
  OrderServiceRepoName:
    Type: String
    Default: order-service
    AllowedPattern: "[a-z\\-]+"
  RestaurantServiceRepoName:
    Type: String
    Default: restaurant-service
    AllowedPattern: "[a-z\\-]+"

  DBInstanceID:
    Default: MainDB
    Description: My database instance
    Type: String
    MinLength: "1"
    MaxLength: "63"
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"
    ConstraintDescription: >-
      Must begin with a letter and must not end with a hyphen or contain two
      consecutive hyphens.
  DBName:
    Default: MainDB
    Description: My database
    Type: String
    MinLength: "1"
    MaxLength: "64"
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"
    ConstraintDescription: Must begin with a letter and contain only alphanumeric characters.
  DBInstanceClass:
    Default: db.t2.micro
    Description: DB instance class
    Type: String
    ConstraintDescription: Must select a valid DB instance type.
  DBAllocatedStorage:
    Default: "25"
    Description: The size of the database (GiB)
    Type: Number
    MinValue: "20"
    MaxValue: "65536"
    ConstraintDescription: must be between 20 and 65536 GiB.
  DBUsername:
    NoEcho: "true"
    Description: Username for MySQL database access
    Type: String
    MinLength: "1"
    MaxLength: "16"
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
  DBPassword:
    NoEcho: "true"
    Description: Password MySQL database access
    Type: String
    MinLength: "8"
    MaxLength: "41"
    AllowedPattern: "[a-zA-Z0-9]*"
    ConstraintDescription: must contain only alphanumeric characters.

Resources:
  # SecurityGroups
  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: DatabaseSecurityGroup
      GroupDescription: "allows traffic on port 5432"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: -1
          FromPort: 5432
          ToPort: 5432
          CidrIp: 0.0.0.0/0
      #Egress is automatically defined to allow all
      Tags:
        - Key: name
          Value: DatabaseSecurityGroup
  ServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: ServiceSecurityGroup
      GroupDescription: allows traffic on port 8080
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8090
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: name
          Value: ServiceSecurityGroup

  # IAM roles
  FargateRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
                - ecs.amazonaws.com
                - ecs-tasks.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: /
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
        - "arn:aws:iam::aws:policy/AmazonECS_FullAccess"
      Policies:
        - PolicyName: AccessECR
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "ecr:BatchGetImage"
                  - "ecr:GetAuthorizationToken"
                  - "ecr:GetDownloadUrlForLayer"
                Resource: "*"

  # VPC and subnets
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.20.0.0/16
      EnableDnsSupport: true
      Tags:
        - Key: name
          Value: "template VPC"
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 0
        - !GetAZs
          Ref: "AWS::Region"
      VpcId: !Ref VPC
      CidrBlock: 10.20.0.0/20
      Tags:
        - Key: name
          Value: "public subnet us east"
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 1
        - !GetAZs
          Ref: "AWS::Region"
      VpcId: !Ref VPC
      CidrBlock: 10.20.16.0/20
      Tags:
        - Key: name
          Value: "public subnet us west"
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 0
        - !GetAZs
          Ref: "AWS::Region"
      VpcId: !Ref VPC
      CidrBlock: 10.20.32.0/20
      Tags:
        - Key: name
          Value: "private subnet us east"
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 1
        - !GetAZs
          Ref: "AWS::Region"
      VpcId: !Ref VPC
      CidrBlock: 10.20.48.0/20
      Tags:
        - Key: name
          Value: "private subnet us west"
  IGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: keyname
          Value: value
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref IGW
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: name
          Value: "public route table"
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW
  PublicRTAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable
  PublicRTAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable
  EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  NatGw:
    Type: AWS::EC2::NatGateway
    Properties:
      SubnetId: !Ref PublicSubnet2
      AllocationId: !GetAtt EIP.AllocationId
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: name
          Value: "Private Route Table"
  PrivateNatRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGw
  PrivateRTAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable
  PrivateRTAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  # ECR Repositories
  UserServiceRepo:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Ref UserServiceRepoName
  OrderServiceRepo:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Ref OrderServiceRepoName
  RestaurantServiceRepo:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Ref RestaurantServiceRepoName

  # S3 Buckets
  AccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: for bucket access
  UserPortal:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketName: !Ref UserPortalBucketName
      Tags:
        - Key: name
          Value: user portal bucket
  UserPortalPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref UserPortal
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: "s3:GetObject"
            Effect: Allow
            Resource: !Sub "arn:aws:s3:::${UserPortal}/*"
            Principal:
              CanonicalUser: !GetAtt AccessIdentity.S3CanonicalUserId
  AdminPortal:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketName: !Ref AdminPortalBucketName
      Tags:
        - Key: name
          Value: admin portal bucket
  AdminPortalPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref AdminPortal
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: "s3:GetObject"
            Effect: Allow
            Resource: !Sub "arn:aws:s3:::${AdminPortal}/*"
            Principal:
              CanonicalUser: !GetAtt AccessIdentity.S3CanonicalUserId
  DriverPortal:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketName: !Ref DriverPortalBucketName
      Tags:
        - Key: name
          Value: driver portal bucket
  DriverPortalPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref DriverPortal
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: "s3:GetObject"
            Effect: Allow
            Resource: !Sub "arn:aws:s3:::${DriverPortal}/*"
            Principal:
              CanonicalUser: !GetAtt AccessIdentity.S3CanonicalUserId

  # Route 53
  LoadBalancerRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      Name: api.drscrumptious.com
      Type: CNAME
      TTL: 900
      HostedZoneId: !Ref HostedZoneId
      ResourceRecords:
        - !GetAtt LoadBalancer.DNSName

  # ECS
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      Name: ECSLoadBalancer
      Scheme: internet-facing
      Type: application
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
  ## Listener
  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Port: 443
      Protocol: "HTTPS"
      Certificates:
        - CertificateArn: !Ref CertificateARN
      LoadBalancerArn: !Ref LoadBalancer
      DefaultActions:
        - Type: fixed-response
          FixedResponseConfig:
            StatusCode: 404
            MessageBody: "method not found"
            ContentType: text/plain
  ## Target groups
  UserTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      HealthCheckPath: /health
      HealthCheckPort: 8080
      HealthCheckProtocol: HTTP
      VpcId: !Ref VPC
      Name: UserTargetGroup
      Port: 8080
      Protocol: HTTP
  OrderTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      HealthCheckPath: /health
      HealthCheckPort: 8080
      HealthCheckProtocol: HTTP
      VpcId: !Ref VPC
      Name: OrderTargetGroup
      Port: 8080
      Protocol: HTTP
  RestaurantTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      HealthCheckPath: /health
      HealthCheckPort: 8080
      HealthCheckProtocol: HTTP
      VpcId: !Ref VPC
      Name: RestaurantTargetGroup
      Port: 8080
      Protocol: HTTP
  # ECS cluster
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      CapacityProviders:
        - FARGATE
      ClusterName: !Ref ECSClusterName

  # RDS
  Database:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: !Ref DBAllocatedStorage
      DBInstanceClass: !Ref DBInstanceClass
      DBName: !Ref DBName
      DBSubnetGroupName: !Ref DatabaseSubnetGroup
      DBInstanceIdentifier: !Ref DBInstanceID
      Engine: postgres
      EngineVersion: 12.7
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      Port: 5432
      PubliclyAccessible: false
      StorageEncrypted: false
      VPCSecurityGroups:
        - !Ref DatabaseSecurityGroup
  DatabaseSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: "group for private subnets"
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      Tags:
        - Key: name
          Value: "PrivateSubnetGroup"
  DatabaseUsernameSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: DBUsername
      Description: "Username for main database"
      SecretString: !Ref DBUsername
  DatabasePasswordSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: DBPassword
      Description: "Password for main database"
      SecretString: !Ref DBPassword

Outputs:
  VPCID:
    Description: "Vpc Id"
    Value: !Ref VPC
    Export:
      Name: !Sub "${AWS::StackName}-VPCID"
  ServiceSecurityGroupName:
    Description: "Service security group name"
    Value: !Ref VPC
    Export:
      Name: !Sub "${AWS::StackName}-ServiceSecurityGroup"
  FargateRoleARN:
    Description: "Fargate role ARN"
    Value: !GetAtt FargateRole.Arn
    Export:
      Name: !Sub "${AWS::StackName}-FargateRoleARN"
  PublicSubnet1:
    Description: "public subnet 1 id"
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub "${AWS::StackName}-PublicSubnet1"
  PublicSubnet2:
    Description: "public subnet 2 id"
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub "${AWS::StackName}-PublicSubnet2"
  PrivateSubnet1:
    Description: "private subnet 1 id"
    Value: !Ref PrivateSubnet1
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnet1"
  PrivateSubnet2:
    Description: "private subnet 2 id"
    Value: !Ref PrivateSubnet2
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnet2"
  AccessIdentity:
    Description: "origin access identity, allows get object to all portal buckets"
    Value: !Ref AccessIdentity
    Export:
      Name: !Sub "${AWS::StackName}-S3AccessIdentity"
  LBListenerArn:
    Description: "ARN for load balancer main listener, has certificate for https"
    Value: !Ref LoadBalancerListener
    Export:
      Name: !Sub "${AWS::StackName}-LBListenerARN"
  UserTargetGroupArn:
    Description: "User target group arn"
    Value: !Ref UserTargetGroup
    Export:
      Name: !Sub "${AWS::StackName}-UserTGArn"
  OrderTargetGroupArn:
    Description: "Admin target group arn"
    Value: !Ref OrderTargetGroup
    Export:
      Name: !Sub "${AWS::StackName}-OrderTGArn"
  RestaurantTargetGroupArn:
    Description: "Restaurant target group arn"
    Value: !Ref RestaurantTargetGroup
    Export:
      Name: !Sub "${AWS::StackName}-RestaurantTGArn"
  ECSClusterName:
    Description: "ECS cluster name"
    Value: !Ref ECSClusterName
    Export:
      Name: !Sub "${AWS::StackName}-ECSClusterName"
  DatabaseEndpoint:
    Description: "database url"
    Value: !GetAtt Database.Endpoint.Address
    Export:
      Name: !Sub "${AWS::StackName}-DBEndpoint"
  DatabaseName:
    Description: "database name"
    Value: !Ref DBName
    Export:
      Name: !Sub "${AWS::StackName}-DBName"
  DatabasePort:
    Description: "database port"
    Value: !GetAtt Database.Endpoint.Port
    Export:
      Name: !Sub "${AWS::StackName}-DBPort"
